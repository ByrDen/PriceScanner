networks:
  scaner-network:
    driver: bridge

services:

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    depends_on:
      - backend
    networks:
      - scaner-network

  backend:
    container_name: "scanner_backend"
    hostname: "backend"
    build:
      context: .
      dockerfile: app/Dockerfile
    command: python -m app
    volumes:
      - "./app:/opt/app:ro"
    ports:
      - "8000:80"
    env_file:
      - ".env"
    networks:
        - scaner-network
    depends_on:
      db:
         condition: service_healthy

  db:
    image: postgres:16.7-alpine3.20
    container_name: "scanner_db"
    hostname: "scanner_db"
    env_file:
      - ".env"
    environment:
      PGUSER: admin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: admin
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "admin", "-U", "admin" ]
      timeout: 10s
      interval: 10s
      retries: 10
    networks:
      - scaner-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - "./conf.d/app.conf:/etc/nginx/conf.d/app.conf:ro"
      - './nginx/log:/var/log/nginx:rw'
      - './nginx/cache:/var/lib/nginx/proxy_cache:rw'
      - "./certbot/conf:/etc/letsencrypt:ro"
      - "./certbot/www:/var/www/certbot:ro"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - scaner-network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - "./certbot/www:/var/www/certbot:rw"
      - "./certbot/conf:/etc/letsencrypt:rw"